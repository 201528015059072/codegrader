require "rspec"
require 'rubygems'
require "nokogiri"
require 'mechanize'
require 'uri'

uri = ENV['HEROKU_URI']
uri = "http://" + uri if uri and uri !~ /^http:\/\//
#uri = "http://localhost:3000/movies"
uri = URI.parse(uri) if uri
host = URI::HTTP.build(:host => uri.host, :port => uri.port).to_s if uri
#$url = 'http://growing-moon-5313.herokuapp.com/movies'
$url = URI.join(host, 'movies').to_s


# Logic to parse column HEADER from a html TABLE.
# from http://stackoverflow.com/questions/8749101/parse-html-table-using-nokogiri-and-mechanize
class TableExtractor  
  def self.extract_column table, header
    table.search('tbody/tr').collect do |row|
      case header
      when :title
        row.at("td[1]").text.strip
      when :rating
        row.at("td[2]").text.strip
      when :release_date
        row.at("td[3]").text.strip
      when :more_info
        row.at("td[4]").text.strip
      end
    end
  end
end

describe "App" do
  it "should respond to simple request [0 points]" , points: 0 do
    agent = Mechanize.new
    page = agent.get($url)
  end
end

def select_all_ratings_and_submit(page)
  # This block of code is to account for students who left the ratings unchecked by default, and therefore not displaying anything
  page.forms.each do |form|
    form.checkboxes.each do |cb|
      cb.check
    end
    submit = form.button_with(:id => 'ratings_submit')
    if submit
      page = form.submit(submit)
    else
      page = form.submit
    end
  end
  page
end

def get_sort_link(page, field)
  id = "#{field}_header"
  link = page.link_with(:id => id)
  return link if link

  if not page.search("##{id}").empty?
    href = page.search("##{id}")[0].search('a')[0]['href']
    link = page.link_with(:href => href)
    return link if link
  end

  raise "Cannot find sort link"
end

def sorted?(column)
  column = column.select{|x| x != ""}.# gets rid of that Amelie blank release date field
    map{|x| x.downcase.gsub(/[^a-z0-9]/, ' ').strip}
  expect(column).not_to be_empty
  expect(column).to match_array(column.sort)
end


describe "Table header" do
  before(:each) do
    @startpage = Mechanize.new.get($url)
    @startpage = select_all_ratings_and_submit(@startpage)
  end
  it "should have link to sort by title [10 points]" , points: 10 do
    page = @startpage.link_with(:id => 'title_header')
    expect(page).not_to be_nil
  end
  it "should have link to sort by release date [10 points]" , points: 10 do
    page = @startpage.link_with(:id => 'release_date_header')
    expect(page).not_to be_nil
  end
end

describe "Table" do
  before(:each) do
    @startpage = Mechanize.new.get($url)
    @startpage = select_all_ratings_and_submit(@startpage)
  end
  it "should be sortable by title [20 points]" , points: 20 do
    sorted_page = get_sort_link(@startpage, 'title').click
    table = sorted_page.parser.css("#movies").first
    column = TableExtractor.extract_column table, :title
    expect(sorted?(column)).to be_truthy

  end
  it "should be sortable by release date [20 points]" , points: 20 do
    sorted_page = get_sort_link(@startpage, 'release_date').click
    table = sorted_page.parser.css("#movies").first
    column = TableExtractor.extract_column table, :release_date
    expect(sorted?(column)).to be_truthy
  end
  # This is not actually part of the spec
  #it "should highlight neither header by default" do
  #  title = @startpage.parser.css('#title_header')
  #  release_date = @startpage.parser.css('#release_date_header')
  #  # TODO check css styling
  #end
  it "should highlight title header when sorted [20 points]" , points: 20 do
    sorted_page = get_sort_link(@startpage, 'title').click
    title = sorted_page.parser.css('#title_header')
    release_date = sorted_page.parser.css('#release_date_header')
    # TODO check css styling
    expect(sorted_page.search('table[@id=movies]/thead/tr/th[1]')[0].attributes['class'].value).to match(/\bhilite\b/)
  end
  it "should highlight release date header when sorted [20 points]" , points: 20 do
    sorted_page = get_sort_link(@startpage, 'release_date').click
    title = sorted_page.parser.css('#title_header')
    release_date = sorted_page.parser.css('#release_date_header')
    # TODO check css styling
    expect(sorted_page.search('table[@id=movies]/thead/tr/th[3]')[0].attributes['class'].value).to match(/\bhilite\b/)
  end
end

class MoviesTable
  def initialize(page)
    @page = page
  end

  def each_body_row
    @page.search("table[@id=movies]/tbody").children.filter('tr').each do |tr|
      yield MoviesTableRow.new(tr)
    end
  end
end

class MoviesTableRow
  attr_reader :columns
  def initialize(tr)
    @columns = {}
    cols = tr.children.filter('td').map{|x| x.text.strip}
    @columns[:title] = cols[0]
    @columns[:rating] = cols[1]
    @columns[:release_date] = cols[2]
    @columns[:more_info] = cols[3]
  end
end

describe "GET /movies" do
  before(:each) do
    @agent = Mechanize.new
    @base_uri = URI.join(host, 'movies')
    @page = @agent.get(@base_uri)
   # @page = select_all_ratings_and_submit(@page)
  end

  it "should be successful" do
  end

  it "should have #ratings_form form [5 points]" , points: 5 do
    expect(@page).not_to be_nil
    expect(@page.form_with(:id =>'ratings_form')).not_to be_nil
  end
  
  it "should have #ratings_submit button [5 points]" , points: 5 do
    # FIXME: In future offerings, tell students to specify an id for the form itself.
    expect(@page.form_with(:id => 'ratings_form').button_with(:id => 'ratings_submit')).not_to equal(nil)
  end

  it "should have checkboxes [5 points]" , points: 5 do
    # FIXME
    # Use the following test case in the future
    @page.form_with(:id => 'ratings_form').checkboxes.each do |checkbox|
      expect(checkbox[:id]).to match(/ratings_\w+/)
    end
  end
  # Get movie rating
  def find_rating(page = @page)
    rating = page.search("table[@id=movies]/tbody/tr[1]/td[2]").text
    expect(rating).not_to be_empty
    rating
  end

  # Get form
  def get_form(page = @page)
    # FIXME: This would also be nicer with a form id
    ratings_form = nil
    page.forms.each do |form|
      if form.button_with(:id => "ratings_submit")
        ratings_form = form
      end
    end
    return page.forms.first if (ratings_form.nil? && page.forms.size == 1)
    expect(ratings_form).not_to be_nil
    ratings_form
  end

  # Selects a rating, submits, and returns new page and rating selected
  def select_rating_and_submit(page=@page)
    rating = find_rating page
    ratings_form = get_form page

    # Check corresponding rating
    # Uncheck all other ratings
    ratings_form.checkboxes.each do |checkbox|
      if checkbox[:id] == "ratings_#{rating}"
        checkbox.check
      else
        checkbox.uncheck
      end
    end

    # Submit form
    ratings_submit = ratings_form.button_with(:id => "ratings_submit")
    response = ratings_form.submit(ratings_submit)
    [response, rating]
  end

  def select_all_ratings_and_submit(page)
    # This block of code is to account for students who left the ratings unchecked by default, and therefore not displaying anything
    page.forms.each do |form|
      form.checkboxes.each do |cb|
        cb.check
      end
      submit = form.button_with(:id => 'ratings_submit')
      if submit
        page = form.submit(submit)
      else
        page = form.submit
      end
    end
    page
  end

  def get_sort_link(page, field)
    id = "#{field}_header"
    link = page.link_with(:id => id)
    return link if link

    if not page.search("##{id}").empty?
      href = page.search("##{id}")[0].search('a')[0]['href']
      link = page.link_with(:href => href)
      return link if link
    end

    raise "Cannot find sort link"
  end

  def sorted?(column)
    column = column.select{|x| x != ""}. # gets rid of that Amelie blank release date field
      map{|x| x.downcase.gsub(/[^a-z0-9]/, ' ').strip}
    expect(column).not_to be_empty
    expect(column).to match_array(column.sort)
  end
 
  context "When I first visit the page" do
    it "should have all checkboxes checked  [8 points]" , points: 8 do
     checked_boxes=@page.form_with(:id => 'ratings_form').checkboxes_with(:checked=>true)
     
     checkboxes= @page.form_with(:id => 'ratings_form').checkboxes.each do |checkbox|
       expect(checkbox[:id]).to match(/ratings_\w+/)
       expect(checked_boxes.include?(checkbox)).to be_truthy, "unchecked checkbox found with id #{checkbox[:id]}"
     end
    end
    it "should have movies visible [7 points]" , points: 7 do
      initial_rows=0
      total_rows=0
      MoviesTable.new(@page).each_body_row do |row|
        initial_rows+=1
      end
      
      @page=select_all_ratings_and_submit(@page)
      MoviesTable.new(@page).each_body_row do |row|
        total_rows+=1
      end

      expect(initial_rows).to equal(total_rows)
    end 
  
  
  end
 
  context "when selecting a movie rating" do
    before(:each) do 
      @page = select_all_ratings_and_submit(@page)
    end
    it "should only display movies of that rating [20 points]" , points: 20 do
      response, rating = select_rating_and_submit

      # In response, check all of the rows for rating
      count = 0
      table = MoviesTable.new(response)
      table.each_body_row do |row|
        expect(row.columns[:rating]).to match(rating)
        count += 1
      end
      expect(count).to be >= 1
    end

    it "should automatically check the selected rating in the response [25 points]" , points: 25 do
      response, rating = select_rating_and_submit
      new_ratings_form = get_form(response)

      #p response

      expect(new_ratings_form.checkboxes).not_to be_empty
      new_ratings_form.checkboxes.each do |checkbox|
        if checkbox[:id] == "ratings_#{rating}"
          expect(checkbox).to be_checked
        else
          expect(checkbox).not_to be_checked
        end
      end
    end

    # FIXME
    # Removed because it wasn't in the original spec
    # Should add back into future versions of course
    #it "should preserve the sort order" do
    #  sorted_page = @page.link_with(:id => 'title_header').click
    #  @agent.cookie_jar.clear! # ignore session
    #  response, rating = select_rating_and_submit(sorted_page)

    #  table = MoviesTable.new(response)
    #  previous_title = ''
    #  table.each_body_row do |row|
    #    expect(row.columns[:title]).to be >= previous_title
    #    previous_title = row.columns[:title]
    #  end
    #end
  end

  context "when selecting a sort column" do
     before(:each) do 
      @page = select_all_ratings_and_submit(@page)
    end
    it "should preserve the ratings filter [25 points]" , points: 25 do
      filtered_page, rating = select_rating_and_submit
      sorted_page = get_sort_link(filtered_page, 'title').click
      table = MoviesTable.new(sorted_page)
      columns = []
      table.each_body_row do |row|
        columns << row.columns[:title]
        expect(row.columns[:rating]).to match(rating)
      end
      expect(sorted?(columns)).to be_truthy
    end
  end
end

class MoviesTable
  def initialize(page)
    @page = page
  end

  def each_body_row
    @page.search("table[@id=movies]/tbody").children.filter('tr').each do |tr|
      yield MoviesTableRow.new(tr)
    end
  end
end

class MoviesTableRow
  attr_reader :columns
  def initialize(tr)
    @columns = {}
    cols = tr.children.filter('td').map{|x| x.text.strip}
    @columns[:title] = cols[0]
    @columns[:rating] = cols[1]
    @columns[:release_date] = cols[2]
    @columns[:more_info] = cols[3]
  end
end

describe "GET /movies" do
  before(:each) do
    @agent = Mechanize.new
    @movies_url = URI.join(host, 'movies')
    @page = @agent.get(@movies_url)
    @page = select_all_ratings_and_submit(@page)
  end

  context "basic tests" do
    it "should be successful" do
      expect(@page).not_to be_nil
    end
    it 'should have a form with id ratings_form' do
      expect(@page).not_to be_nil
      expect(@page.form_with(:id =>'ratings_form')).not_to be_nil
    end
    it "should have #ratings_submit button" do
      expect(@page).not_to be_nil
      expect(@page.form_with(:id =>'ratings_form').button_with(:id => 'ratings_submit')).not_to equal(nil)
    end

    it "should have checkboxes" do
      expect(@page).not_to be_nil
      @page.form_with(:id => 'ratings_form').checkboxes.each do |checkbox|
        expect(checkbox[:id]).to match(/ratings_\w+/)
      end
    end

    it "should have #movies" do
      expect(@page.search("#movies")).not_to be_empty
    end

    it "should have #title_header" do
      expect(@page.search("#title_header")).not_to be_empty
    end

    it "should have #release_date_header" do
      expect(@page.search("#release_date_header")).not_to be_empty
    end
  end

  # Get movie rating
  def find_ratings(page=@page)
    ratings = []
    MoviesTable.new(page).each_body_row do |row|
       ratings << row.columns[:rating]
    end
    ratings.uniq
  end

  # Get form
  def get_form(page = @page)
    # FIXME: This would also be nicer with a form id
    ratings_form = nil
    page.forms.each do |form|
      if form.button_with(:id => "ratings_submit")
        ratings_form = form
      end
    end
    return page.forms.first if (ratings_form.nil? && page.forms.size == 1)
    expect(ratings_form).not_to be_nil
    ratings_form
  end

  # Checks specified rating
  # Uncheck all other ratings
  def select_ratings(ratings_form, rating_or_ratings)
    if rating_or_ratings.is_a?(Array)
      ratings = rating_or_ratings
    else
      ratings = [rating_or_ratings]
    end

    rating_ids = ratings.map{|x| "ratings_#{x}"}
    ratings_form.checkboxes.each do |checkbox|
      if rating_ids.include? checkbox[:id]
        checkbox.check
      else
        checkbox.uncheck
      end
    end
  end

  # Selects ratings, submits, and returns new page and rating selected
  def select_ratings_and_submit(page=@page, ratings=nil)
    if ratings.nil?
      ratings = [find_ratings.first]
    end

    ratings_form = get_form page

    select_ratings(ratings_form, ratings)

    # Submit form
    ratings_submit = ratings_form.button_with(:id => "ratings_submit")
    if ratings_submit
      response = ratings_form.submit(ratings_submit)
    else
      response = ratings_form.submit
    end
    [response, ratings]
  end

  def verify_ratings_filter(page, ratings)
    # In response, check all of the rows for rating
    count = 0
    table = MoviesTable.new(page)
    table.each_body_row do |row|
      expect(ratings).to include(row.columns[:rating])
      count += 1
    end
    expect(count).to be >= 1
  end

  def verify_sort_order(page, field)
    table = MoviesTable.new(page)
    column = []
    table.each_body_row {|x| column << x.columns[field]}
    column = column.select{|x| x != ""}. # gets rid of that Amelie blank release date field
      map{|x| x.downcase.gsub(/[^a-z0-9]/, ' ').strip}
    expect(column).not_to be_empty
    expect(column).to match_array(column.sort)
  end

  def select_all_ratings_and_submit(page)
    # This block of code is to account for students who left the ratings unchecked by default, and therefore not displaying anything
    page.forms.each do |form|
      form.checkboxes.each do |cb|
        cb.check
      end
      submit = form.button_with(:id => 'ratings_submit')
      if submit
        page = form.submit(submit)
      else
        page = form.submit
      end
    end
    page
  end

  def get_sort_link(page, field)
    id = "#{field}_header"
    link = page.link_with(:id => id)
    return link if link

    if not page.search("##{id}").empty?
      href = page.search("##{id}")[0].search('a')[0]['href']
      link = page.link_with(:href => href)
      return link if link
    end

    table = page.search("#movies")
    header_row = table.search("thead/tr")[0]
    if field.to_s == 'title'
      idx = 0
    else
      idx = 2
    end
    href = header_row.search("th")[idx].search("a")[0]['href']
    link = page.link_with(:href => href)
    return link if link

    raise "Cannot find sort link"
  end

  def check_redirect(page)
    unless (page.respond_to?(:code) && page.code =~ /3\d\d/) or (page.link_with(:text => "redirected"))
      raise "did not redirect"
    end
  end

  context "when selecting a movie rating" do
    it "should remember the rating selected [20 points]" , points: 20 do
      response, ratings = select_ratings_and_submit
      response = @agent.get(@movies_url) # blank parameters
      verify_ratings_filter(response, ratings)
    end

    it "should allow new ratings to be selected [15 points]" , points: 15 do
      ratings = find_ratings(@page)
      expect(ratings.length).to be >= 2
      #repeats above test with deprecated methods
      #ratings.should have_at_least(2).items
      first_rating = ratings[0]
      second_rating = ratings[1]
      response, _ = select_ratings_and_submit(@page, first_rating)
      response, _ = select_ratings_and_submit(response, second_rating)
      verify_ratings_filter(response, second_rating)
    end

    it "should redirect to a RESTful route [15 points]" , points: 15 do
      response, ratings = select_ratings_and_submit
      @agent.redirect_ok = false
      response = @agent.get(@movies_url)
      check_redirect(response)
    end
  end

  context "when selecting a sort field" do
    it "should remember the sort order [20 points]" , points: 20 do
      sorted_page = get_sort_link(@page, 'title').click
      response = @agent.get(@movies_url) # blank parameters
      verify_sort_order(response, :title)
    end

    it "should allow a new sort order to be selected [15 points]" , points: 15 do
      sorted_page = get_sort_link(@page, 'title').click
      response = get_sort_link(@page, 'release_date').click
      verify_sort_order(response, :release_date)
    end

    it "should redirect to a RESTful route [15 points]" , points: 15 do
      response = get_sort_link(@page, 'title').click
      @agent.redirect_ok = false
      response = @agent.get(@movies_url)
      check_redirect(response)
    end
  end
end
